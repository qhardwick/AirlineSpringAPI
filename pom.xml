<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.revature</groupId>
	<artifactId>AirlineSpringAPI</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.16</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<!-- Storing configuration as code. Rather than leaving a readme that tells 
		our coworkers that they need to manually change the target environment to 
		1.8, we leave a pom file that will do that. -->
	<properties>
		<java.version>1.8</java.version>
	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>software.amazon.awssdk</groupId>
				<artifactId>bom</artifactId>
				<version>2.15.43</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!-- log4j2 -->
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-bom</artifactId>
				<version>2.17.1</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<!-- Spring Webflux framework provides support for Monos, Fluxes, Reactive Netty server, and more -->
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>

		<!-- Spring AOP enables aspect-oriented programming in Spring applications. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>

		<!-- Spring Devtools auto-relaunches the application when classpath resources change. Requires configuration
		on Intellij, and even then it seems to work a lot better on Eclipse. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<!-- Spring Boot Actuator: Gives us some restful endpoints for web application
			metrics such as /health, /beans/, and /metrics -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- Lombok reduces boilerplate code by generating getters, setters, constructors, and more. -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- Spring Boot Test provides JUnit, SpringTest (Spring Boot Test), AssertJ, Hamcrest,
			Mockito, JSONassert, and JSONPath. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Core dependency for the JUnit 5 testing framework. -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.7.0</version>
			<scope>test</scope>
		</dependency>

		<!-- Reactor Test provides testing utilities for Reactor Core and Reactor Netty like StepVerifier. -->
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- DataStax Cassandra Driver is the core dependency for the Cassandra database. -->
		<dependency>
			<groupId>com.datastax.oss</groupId>
			<artifactId>java-driver-core</artifactId>
			<version>4.13.0</version>
		</dependency>

		<!-- AWS plugin for Cassandra authentication -->
		<dependency>
			<groupId>software.aws.mcs</groupId>
			<artifactId>aws-sigv4-auth-cassandra-java-driver-plugin</artifactId>
			<version>4.0.4</version>
		</dependency>

		<!-- Spring Data Cassandra -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-cassandra</artifactId>
		</dependency>

		<!-- AWS S3 SDK holds the client classes used for communicating with AWS Simple Storage Service (S3) -->
		<dependency>
			<groupId>software.amazon.awssdk</groupId>
			<artifactId>s3</artifactId>
		</dependency>

		<!-- OpenApi for Swagger -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-webflux-ui</artifactId>
			<version>1.5.12</version>
		</dependency>

		<!-- Karate End-to-End testing framework-->
		<dependency>
			<groupId>com.intuit.karate</groupId>
			<artifactId>karate-junit5</artifactId>
			<version>1.1.0</version>
			<scope>test</scope>
		</dependency>
    </dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>